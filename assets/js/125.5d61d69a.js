(window.webpackJsonp=window.webpackJsonp||[]).push([[125],{340:function(t,e,a){"use strict";a.r(e);var s=a(0),n=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"commit-a-change"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#commit-a-change","aria-hidden":"true"}},[t._v("#")]),t._v(" Commit a Change")]),t._v(" "),a("p",[t._v("Once a change has been made to a project, it is possible to commit the change to Git. Committing is how we tell Git to make a changeset or snapshot of our project.")]),t._v(" "),a("p",[t._v("Committing changes is a two-step process. First new changes must be added to the staging area. The staging area is how Git distinguishes between the changes we want to commit versus those we do not. Only changes in the staging area can be committed.")]),t._v(" "),a("h2",{attrs:{id:"adding-to-the-staging-area"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#adding-to-the-staging-area","aria-hidden":"true"}},[t._v("#")]),t._v(" Adding to the staging area")]),t._v(" "),a("p",[t._v("To add a specific file to the staging area, we would use the "),a("code",[t._v("git add")]),t._v(" command from within the project folder followed by the file's path.")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Add index.html to the staging area")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" index.html\n")])])]),a("p",[t._v("It is possible to add multiple files to the staging area by using different options.")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Add all files that end in .html")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" *.html\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Add all files in the CSS directory")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" CSS/*\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Add all files everywhere")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" --all\n")])])]),a("h2",{attrs:{id:"committing-the-changes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#committing-the-changes","aria-hidden":"true"}},[t._v("#")]),t._v(" Committing the Changes")]),t._v(" "),a("p",[t._v("Once a file has been added to the staging area, it can be committed using the "),a("code",[t._v("git commit")]),t._v(" command. Each time a commit is made, it is important to add a short message that describes what the commit or changes are doing. We add a message by using the "),a("code",[t._v("-m")]),t._v(" option followed by the message in quotes.")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Adds an index.html to my project."')]),t._v("\n")])])]),a("h2",{attrs:{id:"commit-messages"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#commit-messages","aria-hidden":"true"}},[t._v("#")]),t._v(" Commit Messages")]),t._v(" "),a("p",[t._v("While there are few requirements for commit messages, there are best practices for what kind of messages should be added to commits.")]),t._v(" "),a("ol",[a("li",[t._v("Messages should be short single-line summaries (less than 50 characters). A complete description can be added to the summary after a blank line.")]),t._v(" "),a("li",[t._v("Messages should be written in the present tense, not past tense.")]),t._v(" "),a("li",[t._v("Messages should be clear and descriptive")])])])}],!1,null,null,null);e.default=n.exports}}]);