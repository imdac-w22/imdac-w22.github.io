(window.webpackJsonp=window.webpackJsonp||[]).push([[244],{459:function(t,e,s){"use strict";s.r(e);var n=s(0),a=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"changing-inline-styles"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#changing-inline-styles","aria-hidden":"true"}},[t._v("#")]),t._v(" Changing Inline Styles")]),t._v(" "),s("p",[t._v("Most of the CSS changes we'll do with JavaScript involve adding or removing classes. However, there may be situations where we want to directly alter an element's inline styles.")]),t._v(" "),s("p",[t._v("Since inline styles are just another HTML attribute (along with "),s("code",[t._v("id")]),t._v(", "),s("code",[t._v("class")]),t._v(", etc.) we can use "),s("code",[t._v("setAttribute()")]),t._v(" and change the "),s("code",[t._v("style")]),t._v(" attribute.")]),t._v(" "),s("p",[t._v("Assuming the presence of "),s("code",[t._v("<p id='text'>Some stuff</p>")]),t._v(" in an HTML document, the following code demonstrates one way of working with inline styles using JavaScript.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" $text "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'text'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n$text"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setAttribute")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'style'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v("`\nbackground-color: #ddd;\ncolor: darkgrey;\nfont-size: 40px;\n`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$text"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAttribute")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'style'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("A multiline string literal has been used here for readability and is completely optional.")]),t._v(" "),s("p",[t._v("Another favourite method among web developers is to use dot notation and access a special "),s("code",[t._v("style")]),t._v(" property automatically created for each JavaScript HTML element object. To avoid confusing these special properties with other JavaScript object properties, we'll use the "),s("code",[t._v("setAttribute()")]),t._v(" approach when manipulating inline styles in this course.")])])}],!1,null,null,null);e.default=a.exports}}]);